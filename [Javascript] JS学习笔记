【JS 基础Ⅰ 】基本类型-操作符和表达式-语句
一。基本类型
1.基本数据类型
number
整数
浮点数（1.4E2 ）
特殊值：NaN (not a number) ; Infinity (无穷大)
string
双引号或单引号引起来的都是string
Boolean
true false；
Object【无序名值对的集合】
Null
null
Undefined
undefined【声明但未赋值；获取对象不存在的属性】
2.获取得知数据类型
typeof 
3.原始类型和引用类型（↓）

原始类型【直接赋值给对应变量】
  Number
  String
  Boolean
  Null
  Undefined
  引用类型【存的是指针，指向对象】
  Object

二。操作符和表达式
1.JS操作符
一元操作符
  ++ 【注意X++还++X即可】
  --
算数操作符
  +; - ; * ; / ; %
关系操作符
  > ; < ; >= ; <=
相等操作符
  == 【做相等比较操作时，字符串类型会转换；✿栗子：0==false】
JavaScript中的相等性判断 【↑】
  ！=
===【全等，不做类型转换】
  ！==
逻辑操作符
  ！
  &&【true和其他操作数进行与操作，则是其他操作数；false则都是false,之前有false，之后的运算则都不用进行】
  ||
赋值操作符
  = 【num+=x】
条件操作符
  ？ ：【布尔表达式？表达式一：表达式二；true：一；false：二；】
逗号操作符
  ，【在赋值操作中运用较多】
对象操作符
  new【获取对象实例】
  delete【删除对象属性】
  .【获取对象属性】
  []【获取对象属性】
  instanceof 【获取是什么对象的实例】
  in 【判断属性是否在对象中】
位操作符
  ~ ； & ；|；^  ；<< ；>>  ；>>>
2.操作符优先级
3.表达式（数字或和运算符的组合）

三。语句
1.语句
条件语句
  if(条件){语句一}else{语句二}
  if(条件){语句一}else if{语句二}else{语句三}
  switch(表达式){
  case 值1：语句
  break；
  case 值2：语句
  break；
  default：语句
  }  【没有匹配的执行default；】
循环语句
  while（表达式）{语句}
  do{语句} while（表达式）【先执行do，无论满不满足while】
  for（初始化；循环条件；更新表达式）{语句}
  break；continue；
循环语句-for-in：for（属性名 in 对象）{语句}
with语句
  with（表达式）{语句}【对同一个对象进行多次操作】
异常捕获语句
  try{语句}catch（exception）{语句}finally{语句}

♥有疑问可见：
https://shimo.im/doc/IiR3zCvV8ccY9bTF

【JS 基础Ⅱ】数值-字符串
一。数值
二。运算(1)
绝对值：Math.abs(x);
四舍五入：Math.round(x);【可把浮点型变整形：】
向上取整：Math.ceil(x);
向下取整：Math.floor(x);
获取最大值：Math.max(value1;value2;...);
获取最小值：Math.min(value1;value2;...);
获取随机值：Math.random(x);【大于等于0小于1】
Math的其他方法：

二。运算(2)
字符强制转换整形：parseInt(string，radix)
输出为浮点型：parseFloat(string)
转化成数字：Number(value) 【对于付款功能输入较合适】
需要保留几位小数：num.toFixed(digits) 
栗子：（100.12345）.toFixed（2） // "100.12"

三。字符串
【拿单引号或双引号引起的，就描述的是字符串。】
判断字符串长度：str.length;
通过索引找出对应字符：str.charAt(index);
找出对应字符并替换：str.replace(regexp|substr,newsubstr)

截取字符串之间的字符（通过索引的方式）：str.substring(indexa[,indexb])［从a到b，不包括b］

截取字符串之间的字符（通过索引的方式，可以传入负的索引值［倒数第几个］）：str.slice(begina[,endb])［从a到b，包括起始索引值，不包括b结束索引］

截取字符串之间的字符（通过length的方式）：str.substr(start[,length])［从开始到多少长度的字符串］
搜索中关键字通过“”分开：str.split();

字符串全部变小写：str.toLowerCase();
字符串全部变大写：str.toUpperCase();
字符串链接：＋

String（）:转字符；

转义：反斜杠\

进阶版单元测试1：
function type(obj){
    return  Object.prototype.toString.call(obj).slice(8, -1).toLowerCase()
}
进阶版单元测试2：

Object.create
<script>
    if( typeof Object.create != 'function'){
        Object.create = function(obj){
            if( typeof obj != 'object' ){
                throw TypeError('Object prototype may only be an Object or null')
    }
            var r = function(){}
            r.prototype = obj
            return new r;  //new r() 与new r 没有区别，只是r函数没有参数时，括号可以省略
    }
    }var a = Object.create({x:1,y:2})
    alert(a.x)
</script>

进阶版单元测试3：
http://www.jianshu.com/p/c769882931b4
答：
高版本的firefox,chrome及ie10以上的浏览器实现了Function.prototype.bind方法，bind方法调用语法为：
functionObj.bind(thisArg[, arg1[, arg2[, ...]]])
使用范例参考如下:
function move(x, y) {   
  this.x += x;    
   this.y += y; 
   }
   var point = {x:1, y:2};
    var pointmove = move.bind(point, 2, 2);
     pointmove(); // {x:3, y:4}
但是低版本浏览器中并未提供该方法，请给出兼容低版本浏览器的bind方法的代码实现。
实现思路
回顾Function.prototype.bind用法：通过参数指定函数调用者和函数参数并返回该函数引用，可知
判断浏览器是否兼容，不兼容就move添加一个bind的方法，让其能够调用move.bindFunction.prototype.bind
将参数转换为数组保存
同时将数组返回var _self = this, args = arguments; return function() { _self.apply(obj, Array.prototype.slice.call(args, 1)); }
所以可得
Function.prototype.bind= function(obj){
      var _self = this, args = arguments;
      return function() {
      _self.apply(obj, Array.prototype.slice.call(args, 1));
      }
      }
在解题的过程中，有些知识点掌握不熟练导致花了很多时间理解，例如原型链，构造函数，构造方法等等，搜寻网上的相关资料，有一个关于prototype的解析不错：Prototype源码浅析——Function.prototype部分(一)

进阶版单元测试4：
斐波那契数列（Fibonacci Sequence）由 0 和 1 开始，之后的斐波那契数就由之前的两数相加。在数学上，斐波那契数列是以递归的方法来定义的：

请实现一个函数，参数为n，返回结果为以n为下标的斐波那契数。函数语法为
var num = fibonacci(n);
使用举例如下
var num = fibonacci(3); // num值等于2
var num = fibonacci(5); // num值等于5
答：
function fibonacci(n) {
    if(n==0) return 0;
    if(n==1) return 1;
    return fibonacci(n-1) + fibonacci(n-2);
}

♥有疑问可见：
https://shimo.im/doc/xkwMfW3UKgcC6j3I
