★①【使用drawImage绘制图像】
1.HTML
  <canvas id="canvas"></canvas>
2.JS
  <script>
      var canvas=document.getElementById('canvas');
      var context=canvas.getContext('2d');
  </script>
  //使用context进行绘制（创建2d上下文环境，渲染接口基于context进行）
3.canvas的大小（尽量不在css中设置）
  设置方式：（默认300,150）
  window.onload=function(){
      canvas.width=1152;
      canvas.height=768;
  }
4.drawImage（渲染图片）
  将图片先置于画布上；
  context.drawImage(image,dx,dy)
  ↑（绘图接口，图像对象，图像坐标，告诉从何处开始渲染）
  例：（创建图片↓）
  <canvas id="canvas" style="background-color: gold"></canvas>
  <script>
      var canvas=document.getElementById('canvas');
      var context=canvas.getContext('2d');
      var Image=new Image();  //在内存中创建该图片，从内存中读取而不是服务器；
      window.onload=function(){
        canvas.width=1152;
        canvas.height=768;
        Image.src='pointer.jpg';   //JS读取该图片；
        Image.onload=function(){
            context.drawImage(Image,100,100)
        }
      }
  </script>
  4.1xx:注意△1.函数必须卸载图片加载完才能执行的函数内，Image.onload=function(){}。不然大图片未加载完开始渲染会出现问题。
            △2.创建图片引入的都是原有尺寸，不会缩放。

★②【玩转drawImage的参数】
1.context.drawImage(Image,dx,dy)
  context.drawImage(Image,dx,dy,dw,dh)//绘制图片的宽和高；
2.context.drawImage(Image,sx,sy,sw,sh,dx,dy,dw,dh)
//原绘制图片上某一部分（宽高为SH,SW；坐标为SX,SY），这部分摘出来，渲染到canvas画布上的坐标位置DX,DY，宽和高DH,DW；
 
★③【在画布中心缩放图像】
1.第一步：创建画布界面
  <canvas id="canvas" style="background-color: gold;display: block;margin: 10px auto"></canvas>
  <script>
      var canvas=document.getElementById('canvas');
      var context=canvas.getContext('2d');
      var Image=new Image();  //在内存中创建该图片，从内存中读取而不是服务器；
      window.onload=function(){
          canvas.width=1152;
          canvas.height=768;
          Image.src='3.jpg';   //JS读取该图片；
          Image.onload=function(){
              context.drawImage(Image,0,0,canvas.width,canvas.height)
          }
      }
  </script>
2.第二步：创建滑动杆
  2.1→HTML5新控件（给控件加基本样式）
  2.2→滑杆的自带属性，最小值（min="0.5"），最大值；
✿关于滑杆属性的介绍：
  <input id="oInput" type="range" min="0.5" max="3.0" step="0.01" value="1.0"/>
  除了最小值（min="0.5"），最大值；step是每一步滑行的距离；value是初始值；
3.第三步：设置倍数即滑杆的value。
  3.1创建新函数，赋值变量scale，Image以scale倍绘制在画布上。
  function drawImageByscale(scale){
      var imageWidth=1152*scale;
      var imageHeight=768*scale;
  }
4.第四步：写图片放大缩小的函数
  4.1 思路是：canvas画布不动，image图片大小已scale的倍数改变。当image图片比canvas画布
  大的时候，多出canvas画布的部分会截掉；小的时候即完整呈现在canvas画布内。渲染图片的方式
  是drawImage（image,dx,dy,dw,dh）.dx，dy是canvas画布减去source图片的宽高除2。
  函数如下：↓
   function drawImageByscale(scale){
            var imageWidth=1152*scale;
            var imageHeight=768*scale;
            var dx=canvas.width/2-imageWidth/2;
            var dy=canvas.height/2-imageHeight/2;
            context.drawImage(Image,dx,dy,imageWidth,imageHeight);
        }
5.第五步：滑杆操纵改变图片大小
  onmousemove函数，滑杆改变scale的值，同时改变image的大小。记得在每次渲染前清空画布。
  ☀☪完整的放大缩小代码：
    <!DOCTYPE html>
    <html>
    <head lang="en">
      <meta charset="UTF-8">
      <title>big&small</title>
      <style>
          body{
            margin: 0;
            padding: 0;
            background-color:dimgray;
          }
          #oInput{
           display: block;
           margin: 10px auto;
           width: 800px;
          }
      </style>
    </head>
  <body>
  <canvas id="canvas" style="background-color: gold;display: block;margin: 10px auto" ></canvas>
  <input id="oInput" type="range" min="0.5" max="3.0" step="0.01" value="1.0"/>
  <script>
    var canvas=document.getElementById('canvas');
    var slider=document.getElementById('oInput');
    var context=canvas.getContext('2d');
    var Image=new Image();  //在内存中创建该图片，从内存中读取而不是服务器；
    window.onload=function(){

        canvas.width=1152;
        canvas.height=768;

        var scale=slider.value; //当前滑杆表示的值，绘制时是要将scale倍的图像绘制在画布上

        Image.src='3.jpg';   //JS读取该图片；
        Image.onload=function(){
            //context.drawImage(Image,0,0,canvas.width,canvas.height)
            //创建新函数，赋值变量scale，Image以scale倍绘制在画布上↓
            drawImageByscale(scale);
            slider.onmousemove=function(){
                scale=slider.value;
                drawImageByscale(scale);
            }
        }
        function drawImageByscale(scale){
            var imageWidth=1152*scale;
            var imageHeight=768*scale;
            var dx=canvas.width/2-imageWidth/2;
            var dy=canvas.height/2-imageHeight/2;
            context.clearRect(0,0,canvas.width,canvas.height);
            context.drawImage(Image,dx,dy,imageWidth,imageHeight);
        }
    }
  </script>
  </body>
  </html>
  
★④【离屏canvas】
1.三种图像操作方式：
  context.drawImage(Image,dx,dy)
  context.drawImage(Image,dx,dy,dw,dh)
  context.drawImage(Image,sx,sy,sw,sh,dx,dy,dw,dh)
  ✿除了引入图片外，还可以引入canvas。
  context.drawImage(canvas,dx,dy)
  context.drawImage(canvas,dx,dy,dw,dh)
  context.drawImage(canvas,sx,sy,sw,sh,dx,dy,dw,dh)
2.所谓的离屏canvas即是指在第一张canvas画布上在附一张canvas画布，操作不受前一张影响。
  ✿实例：加水印。（详见附件）

★⑤canvas画布和鼠标的交互
1.首先需要获取鼠标在canvas画布上的坐标；
  ways：client坐标减去canvas画布的坐标。（写函数windowTocanvas）
  canvas画布的坐标获取是JS函数获取边框边界，getBoundingClientRect()此函数返回矩形对象。
  ✿windowTocanvas()即可返回x,y的值即是鼠标在canvas画布的坐标。
   function windowTocanvas(x,y){
        var bbox=canvas.getBoundingClientRect();
        return {
            x:x-bbox.left,
            y:y-bbox.top
        }
2.和鼠标交互的事件
  onmousedown，onmousemove,onmouseup,onmouseout。
  鼠标按下，获得当前坐标，所以给鼠标按下这一状态设置变量（布尔值），在事件中判断状态，如是按下状态则执行windowTocanvas(x,y)函数。
  
★⑥简易版方形初期放大镜
1.利用离屏canvas，再次创建canvas放大镜视图，结合之前获取的鼠标坐标，换算起始点绘图坐标。
2.思路是：只用一张原图片（大），放在第一张底板的canvas画布上，宽高设定同canvas画布同；而此原图本比canvas画布大，
  每次放大镜点击时获取的大小实际上即是从原图片上截取的，换算原图片和canvas大小的比例得出scale，在进行其他换算。
  --//？是否可以转换思路，将初始图不变，乘以需要的倍数得出的图片，在用draw的第三种方式截出想要的大小。（一个思路，待尝试）
3.关键点：new canvas；scale；绘图函数；
  3.1→在此操作中第一个函数是在ommousedown的时候发生的绘制canvaswithmaginifier函数。
   function drawCanvasWithMaginifier(isShowMaginifier,point){
        context.clearRect(0,0,canvas.width,canvas.height);       |
        context.drawImage(image,0,0,canvas.width,canvas.height); | 清空画布是操作后重绘前的重点。
        if(isShowMaginifier==true){
            drawMaginifier(point);
        }
    } //这个函数的参数是布尔值是否展示放大镜，和point坐标。★首先清空画布，在绘制图像。当确认展示的时候，进行函数drawMaginifier。
  3.2→函数画放大镜
  function drawMaginifier(point){
        var image_cx=point.x*scale;
        var image_cy=point.y*scale;
        var mr=70;
        var sx=image_cx-mr;
        var sy=image_cy-mr;
        var dx=point.x-mr;
        var dy=point.y-mr;
        context.drawImage(offcanvas,sx,sy,mr*2,mr*2,dx,dy,mr*2,mr*2)
    }//这个函数即是绘制一个半径为70的方形放大镜，利用draw的第三种方式。
    

  
